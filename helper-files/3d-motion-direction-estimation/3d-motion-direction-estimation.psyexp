<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.2.4">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="Thank you for your patience." valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1512, 982]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="warning" valType="code" updates="None" name="consoleLoggingLevel"/>
    <Param val="default" valType="str" updates="None" name="ecSampleRate"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="3d-motion-direction-estimation" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="info" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="0" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <RoutineSettingsComponent name="trial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="trial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="dot_motion" plugin="None">
        <Param val="from dotMotion import CoherentMotionFactory, TrueProjector&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import {CoherentMotionFactory, TrueProjector} from 'dotMotion';&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="nDots = 1&amp;#10;cubeSize = 3 # cm&amp;#10;motionGenerator = CoherentMotionFactory(cubeSize,nDots)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="nDots = 1;&amp;#10;cubeSize = 3;&amp;#10;motionGenerator = new CoherentMotionFactory(cubeSize, nDots);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="speed = 0.1;&amp;#10;rng = np.random;&amp;#10;theta = 0;&amp;#10;phi = 0;&amp;#10;totFrames = 1000;&amp;#10;[X, Y, Z] = motionGenerator.generate(rng, speed, theta, phi, totFrames);&amp;#10;screenDist = 60.0;&amp;#10;ipd = 6.5;&amp;#10;eye = [0, 0];&amp;#10;[lx_p, rx_p, y_p] = TrueProjector.project(X, Y, Z, screenDist, ipd, eye);&amp;#10;console.log(lx_p[[0, 0]], rx_p[[0, 0]]);&amp;#10;lx_p /= 20;&amp;#10;rx_p /= 20;&amp;#10;y_p /= 20;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="speed = .1 # pixels per frame&amp;#10;rng = np.random&amp;#10;theta = 0&amp;#10;phi = 0&amp;#10;totFrames = 1000&amp;#10;X,Y,Z = motionGenerator.generate(rng, speed, theta, phi, totFrames)&amp;#10;&amp;#10;# Define projection parameters&amp;#10;screenDist = 60.0   # Distance from the screen&amp;#10;ipd = 6.5            # Inter-pupillary distance&amp;#10;eye = (0, 0)         # Eye position (x, y)&amp;#10;&amp;#10;# Compute the 2D projections for the left and right eye&amp;#10;lx_p, rx_p, y_p = TrueProjector.project(X, Y, Z, screenDist, ipd, eye)&amp;#10;&amp;#10;print(lx_p[0,0],rx_p[0,0])&amp;#10;&amp;#10;# convert to units of screen height&amp;#10;lx_p/=20&amp;#10;rx_p/=20&amp;#10;y_p/=20" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if dotsL[0].status == STARTED:&amp;#10;    # update &amp;#10;    pass&amp;#10;#    for ii,dot in enumerate(dotsL):&amp;#10;#        dot.pos = (lx_p[ii,frameN],y_p[ii,frameN])&amp;#10;#    for ii,dot in enumerate(dotsR):&amp;#10;#        dot.pos = (rx_p[ii,frameN],y_p[ii,frameN])&amp;#10;    " valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((dotsL[0].status === PsychoJS.Status.STARTED)) {&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="dot_motion" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="dot_appearance" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="dotsL = [];&amp;#10;dotsR = [];&amp;#10;for (var ii, _pj_c = 0, _pj_a = util.range(nDots), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    ii = _pj_a[_pj_c];&amp;#10;    left = new visual.ShapeStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: (&quot;dot_left_&quot; + ii.toString()), &quot;size&quot;: [0.05, 0.05], &quot;vertices&quot;: &quot;circle&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [lx_p[[ii, 0]], y_p[[ii, 0]]], &quot;lineColor&quot;: [0, 0, 1], &quot;fillColor&quot;: [0, 0, 1]});&amp;#10;    dotsL.push(left);&amp;#10;    right = new visual.ShapeStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: (&quot;dot_left_&quot; + ii.toString()), &quot;size&quot;: [0.05, 0.05], &quot;vertices&quot;: &quot;circle&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [rx_p[[ii, 0]], y_p[[ii, 0]]], &quot;lineColor&quot;: [1, 0, 0], &quot;fillColor&quot;: [1, 0, 0]});&amp;#10;    dotsR.push(right);&amp;#10;}&amp;#10;trial.components = ((trial.components + dotsL) + dotsR);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="dotsL = []&amp;#10;dotsR = []&amp;#10;for ii in range(nDots):&amp;#10;    left = visual.ShapeStim(&amp;#10;        win=win, name='dot_left_'+str(ii),&amp;#10;        size=(0.05, 0.05), vertices='circle',&amp;#10;        ori=0.0, pos=(lx_p[ii,0],y_p[ii,0]), lineColor=[0,0,1], fillColor=[0,0,1])&amp;#10;    dotsL.append(left)&amp;#10;    right = visual.ShapeStim(&amp;#10;        win=win, name='dot_left_'+str(ii),&amp;#10;        size=(0.05, 0.05), vertices='circle',&amp;#10;        ori=0.0, pos=(rx_p[ii,0],y_p[ii,0]), lineColor=[1,0,0], fillColor=[1,0,0])&amp;#10;    dotsR.append(right)&amp;#10;&amp;#10;trial.components = trial.components+dotsL+dotsR" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# if dot_1_r is starting this frame...&amp;#10;&amp;#10;for dot in dotsL+dotsR:&amp;#10;    if dot.status == NOT_STARTED and tThisFlip &gt;= 0.0-frameTolerance:&amp;#10;        # keep track of start time/frame for later&amp;#10;        dot.frameNStart = frameN  # exact frame index&amp;#10;        dot.tStart = t  # local t and not account for scr refresh&amp;#10;        dot.tStartRefresh = tThisFlipGlobal  # on global time&amp;#10;        win.timeOnFlip(dot, 'tStartRefresh')  # time at next scr refresh&amp;#10;        &amp;#10;        # update status&amp;#10;        dot.status = STARTED&amp;#10;        dot.setAutoDraw(True)&amp;#10;        &amp;#10;&amp;#10;    # if dot_1_l is stopping this frame...&amp;#10;    if dot.status == STARTED:&amp;#10;        # is it time to stop? (based on global clock, using actual start)&amp;#10;        if tThisFlipGlobal &gt; dot.tStartRefresh + 60.0-frameTolerance:&amp;#10;            # keep track of stop time/frame for later&amp;#10;            dot.tStop = t  # not accounting for scr refresh&amp;#10;            dot.tStopRefresh = tThisFlipGlobal  # on global time&amp;#10;            dot.frameNStop = frameN  # exact frame index&amp;#10;            # update status&amp;#10;            dot.status = FINISHED&amp;#10;            dot.setAutoDraw(False)" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="for (var dot, _pj_c = 0, _pj_a = (dotsL + dotsR), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    dot = _pj_a[_pj_c];&amp;#10;    if (((dot.status === NOT_STARTED) &amp;&amp; (tThisFlip &gt;= (0.0 - frameTolerance)))) {&amp;#10;        dot.frameNStart = frameN;&amp;#10;        dot.tStart = t;&amp;#10;        dot.tStartRefresh = tThisFlipGlobal;&amp;#10;        psychoJS.window.timeOnFlip(dot, &quot;tStartRefresh&quot;);&amp;#10;        dot.status = PsychoJS.Status.STARTED;&amp;#10;        dot.setAutoDraw(true);&amp;#10;    }&amp;#10;    if ((dot.status === PsychoJS.Status.STARTED)) {&amp;#10;        if ((tThisFlipGlobal &gt; ((dot.tStartRefresh + 60.0) - frameTolerance))) {&amp;#10;            dot.tStop = t;&amp;#10;            dot.tStopRefresh = tThisFlipGlobal;&amp;#10;            dot.frameNStop = frameN;&amp;#10;            dot.status = PsychoJS.Status.FINISHED;&amp;#10;            dot.setAutoDraw(false);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="dot_appearance" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="polygon" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="cross" valType="str" updates="None" name="shape"/>
        <Param val="(0.05, 0.05)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="trial"/>
  </Flow>
</PsychoPy2experiment>
